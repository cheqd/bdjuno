name: "Release"
on:
  workflow_call:
defaults:
  run:
    shell: bash


jobs:

  release-bdjuno:
    name: "BDJuno Docker Image"
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ github.repository }}

    steps:
      - uses: actions/checkout@v3

      - name: Set network name
        id: set-network
        run: |
          NETWORK_NAME=${GITHUB_REF##*/}
          echo ::set-output name=NETWORK_NAME::"$NETWORK_NAME"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        id: buildx
        with:
          install: true
          version: latest

      - name: Install DigitalOcean CLI
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Login to DigitalOcean Container Registry
        run: doctl registry login --expiry-seconds 600

      - name: Configure Docker image metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: registry.digitalocean.com/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.set-network.outputs.NETWORK_NAME }}-latest
            type=sha,format=long
          labels: |
            org.opencontainers.image.description="BDJuno for cheqd network"
            org.opencontainers.image.source="https://github.com/cheqd/bdjuno"
            org.opencontainers.image.vendor="Cheqd Foundation Limited"
            org.opencontainers.image.created={{date 'dddd, MMMM Do YYYY, h:mm:ss a'}}
            org.opencontainers.image.documentation="https://docs.cheqd.io/node"

      - name: Build BDJuno image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=min

      - name: Push BDJuno image
        run: docker image push --all-tags --all-tags registry.digitalocean.com/${{ env.IMAGE_NAME }}

  release-hasuracli:
    name: "Hasura CLI Docker Image"
    needs: release-bdjuno
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: cheqd/hasuracli

    steps:
      - uses: actions/checkout@v3

      - name: Set network name
        id: set-network
        run: |
          NETWORK_NAME=${GITHUB_REF##*/}
          echo ::set-output name=NETWORK_NAME::"$NETWORK_NAME"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        id: buildx
        with:
          install: true
          version: latest

      - name: Install DigitalOcean CLI
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Login to DigitalOcean Container Registry
        run: doctl registry login --expiry-seconds 600

      - name: Configure Docker image metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: registry.digitalocean.com/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.set-network.outputs.NETWORK_NAME }}-latest
            type=sha,format=long
          labels: |
            org.opencontainers.image.description="Standalone Hasura CLI for cheqd network BDJuno configuration"
            org.opencontainers.image.source="https://github.com/cheqd/bdjuno"
            org.opencontainers.image.vendor="Cheqd Foundation Limited"
            org.opencontainers.image.created={{date 'dddd, MMMM Do YYYY, h:mm:ss a'}}
            org.opencontainers.image.documentation="https://docs.cheqd.io/node"

      - name: Build Hasura CLI image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile.hasura
          platforms: linux/amd64
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=min

      - name: Push Hasura CLI image
        run: docker image push --all-tags --all-tags registry.digitalocean.com/${{ env.IMAGE_NAME }}
  
  cache-purge:
    name: "Purge branch Actions cache"
    needs: release-docker
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    
    steps:

      - name: "Delete Branch Cache Action"
        uses: snnaplab/delete-branch-cache-action@v1.0.0
        with:
          # Specify explicitly because the ref at the time of merging will be a branch name such as 'main', 'develop'
          ref: refs/pull/${{ github.event.number }}/merge
          github-token: ${{ secrets.GITHUB_TOKEN }}
